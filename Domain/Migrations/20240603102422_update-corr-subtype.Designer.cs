// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Microsoft.SqlServer.Types;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(CorrespondenceContext))]
    [Migration("20240603102422_update-corr-subtype")]
    partial class updatecorrsubtype
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.ApprovalAuthorityException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("ApprovalAuthorityExceptions");
                });

            modelBuilder.Entity("Domain.Models.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("Archive", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Attachement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachementTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachementTypeId");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Attachements");
                });

            modelBuilder.Entity("Domain.Models.AttachementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AttachementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ملف نصي",
                            NameEn = "Word file"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ملف PDF",
                            NameEn = "PDF file"
                        });
                });

            modelBuilder.Entity("Domain.Models.Correspondence", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ApprovalAuthorityExceptionId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("CorrespondenceSubTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ExternalUnitId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPublicDecision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("SendToAllEmp")
                        .HasColumnType("bit");

                    b.Property<bool>("SendToAllOrgUnit")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceSubTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExternalUnitId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Correspondences");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArabicName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CorrespondenceActions");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanReplay")
                        .HasColumnType("bit");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("FromUserOrgUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeenAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FromUserOrgUnitId");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("CorrespondenceInbox", (string)null);
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrespondenceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFrame")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CorrespondenceSubTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CorrespondenceTypeId = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "جزاء",
                            NameEn = "جزاء"
                        },
                        new
                        {
                            Id = 2,
                            CorrespondenceTypeId = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "خصم",
                            NameEn = "خصم"
                        },
                        new
                        {
                            Id = 3,
                            CorrespondenceTypeId = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ترقيه",
                            NameEn = "ترقيه"
                        });
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TagId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CorrespondenceTags");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TimeFrame")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CorrespondenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = " داخلي",
                            NameEn = " Internal"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = " خارجي",
                            NameEn = " External"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "القرار",
                            NameEn = "Decision"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تعميم",
                            NameEn = "تعاميم"
                        });
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceWorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("WorkfloStepId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkfloStepId");

                    b.ToTable("CorrespondenceWorkflowSteps");
                });

            modelBuilder.Entity("Domain.Models.CorrespondencesOutbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ProcedureId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserOrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProcedureId");

                    b.HasIndex("ToUserOrgUnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("CorrespondencesOutbox", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Delegate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("DelegateFrom")
                        .HasColumnType("int");

                    b.Property<DateOnly>("From")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("To")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DelegateFrom");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Delegates");
                });

            modelBuilder.Entity("Domain.Models.Draft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("Draft", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ExternalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ExternalUnitTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Mail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SubexternalUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExternalUnitTypeId");

                    b.HasIndex("SubexternalUnitId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ExternalUnits");
                });

            modelBuilder.Entity("Domain.Models.ExternalUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ExternalUnitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "حكومي",
                            NameEn = "حكومي"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "خاص",
                            NameEn = "خاص"
                        });
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Models.GroupDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("GroupDetails");
                });

            modelBuilder.Entity("Domain.Models.OrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<SqlHierarchyId?>("Hid")
                        .HasColumnType("hierarchyid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Lvl")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("OrgUnitTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_OrgUnit");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrgUnitTypeId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrgUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            Hid = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/0/"),
                            IsActive = false,
                            Lvl = 0,
                            Name = "الهيكل التنظيمى",
                            OrgUnitTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            Hid = Microsoft.SqlServer.Types.SqlHierarchyId.Parse("/0/"),
                            IsActive = false,
                            Lvl = 1,
                            Name = "الامانه العامه للاوقاف",
                            OrgUnitTypeId = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.OrgUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrgUnitType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "Root",
                            NameEn = "Root"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مؤسسة",
                            NameEn = "مؤسسة"
                        });
                });

            modelBuilder.Entity("Domain.Models.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserPrivilegeCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserPrivilegeCategoryId");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("Domain.Models.PrivilegeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortNum")
                        .HasColumnType("int");

                    b.Property<int>("SystemModuleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SystemModuleId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PrivilegeCategories");
                });

            modelBuilder.Entity("Domain.Models.PrivilegeSecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PrivilegeSecurityGroups");
                });

            modelBuilder.Entity("Domain.Models.Procedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Procedures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "توجيه",
                            NameEn = "توجيه"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تصعيد",
                            NameEn = "تصعيد"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "اسناد",
                            NameEn = "اسناد"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "الغاء",
                            NameEn = "الغاء"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تصديق",
                            NameEn = "تصديق"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ارسال للموافقة",
                            NameEn = "ارسال للموافقة"
                        });
                });

            modelBuilder.Entity("Domain.Models.PublicRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("PublicRecordStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PublicRecordStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PublicRecord", (string)null);
                });

            modelBuilder.Entity("Domain.Models.PublicRecordStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PublicRecordStatuses");
                });

            modelBuilder.Entity("Domain.Models.SecurityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SecurityGroups");
                });

            modelBuilder.Entity("Domain.Models.SentToExternalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespodenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ExternalUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespodenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ExternalUnitId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SentToExternalUnit");
                });

            modelBuilder.Entity("Domain.Models.SentToOrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit");

                    b.Property<int>("OrgUnitid")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrgUnitid");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SentToOrgUnit", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SentToUserOrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsCopy")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("SentToUserOrgUnits");
                });

            modelBuilder.Entity("Domain.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ارسال للموافقة",
                            NameEn = "ارسال للموافقة"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "اعادة",
                            NameEn = "اعادة"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مرفوض",
                            NameEn = "مرفوض"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مؤجلة",
                            NameEn = "مؤجلة"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "جديد",
                            NameEn = "جديد"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "قيد التنفيذ",
                            NameEn = "قيد التنفيذ"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "جارى التنفيذ",
                            NameEn = "جارى التنفيذ"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مسودة",
                            NameEn = "مسودة"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "حذف",
                            NameEn = "حذف"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "متأخره",
                            NameEn = "متأخره"
                        });
                });

            modelBuilder.Entity("Domain.Models.SubexternalUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SubexternalUnits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ألامين العام",
                            NameEn = "ألامين العام"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "السجل العام",
                            NameEn = "السجل العام"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "السكرتارية",
                            NameEn = "السكرتارية"
                        });
                });

            modelBuilder.Entity("Domain.Models.SystemModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemModules");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TemplatePath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Domain.Models.TemplateCorresponednceSubType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CorrespondenceSubTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceSubTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TemplateCorresponednceSubTypes");
                });

            modelBuilder.Entity("Domain.Models.TemplateOrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TemplateOrgUnits");
                });

            modelBuilder.Entity("Domain.Models.Tracker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("FromUserOrgUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ToUserOrgUnitId")
                        .HasColumnType("int");

                    b.Property<int>("TrackerStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FromUserOrgUnitId");

                    b.HasIndex("ToUserOrgUnitId");

                    b.HasIndex("TrackerStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("Domain.Models.TrackerStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TrackerStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "انشاء",
                            NameEn = "انشاء"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "ارسال للموافقة",
                            NameEn = "ارسال للموافقة"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تصديق",
                            NameEn = "تصديق"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تحرير",
                            NameEn = "تحرير"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تعديل",
                            NameEn = "تعديل"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "المصادقة",
                            NameEn = "المصادقة"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "جديد",
                            NameEn = "جديد"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تحويل لاجراء اللازم",
                            NameEn = "تحويل لاجراء اللازم"
                        });
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveDirectoryUser")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitleAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitleEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NicknameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecurityGroupId")
                        .HasColumnType("int");

                    b.Property<string>("SignatureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SecurityGroupId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.UserOrgUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefaultRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrgUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DelegateId")
                        .IsUnique()
                        .HasFilter("[DelegateId] IS NOT NULL");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrgUnit", (string)null);
                });

            modelBuilder.Entity("Domain.Models.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CorrespondenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserOrgUnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondenceId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserOrgUnitId");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("Domain.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Secret")
                        .HasColumnType("int");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TemplateId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkflowTypeId");

                    b.ToTable("Workflows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "هيكل تنظيمي",
                            NameEn = "Hierarchy orgunit",
                            WorkflowTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مخصص",
                            NameEn = "ad-hock",
                            WorkflowTypeId = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.WorkflowRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("EmpId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("WorkflowRoles");
                });

            modelBuilder.Entity("Domain.Models.WorkflowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("CanWithdrawRequest")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("WorkflowId");

                    b.HasIndex("WorkflowRoleId");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("Domain.Models.WorkflowType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("WorkflowType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "هيكل تنظيمي",
                            NameEn = "Hierarchy orgunit"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "مخصص",
                            NameEn = "ad-hock"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 5, 22, 11, 8, 24, 765, DateTimeKind.Utc).AddTicks(2032),
                            NameAr = "تسلسلي",
                            NameEn = "Sequential"
                        });
                });

            modelBuilder.Entity("Domain.Models.ApprovalAuthorityException", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ApprovalAuthorityExceptionCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.OrgUnit", "OrgUnit")
                        .WithMany("ApprovalAuthorityExceptions")
                        .HasForeignKey("OrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_ApprovalAuthorityExceptions_OrgUnits");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ApprovalAuthorityExceptionUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("ApprovalAuthorityExceptions")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_ApprovalAuthorityExceptions_UserOrgUnit");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OrgUnit");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.Archive", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("Archives")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Archive_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ArchiveCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ArchiveUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("Archives")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Archive_UserOrgUnit");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.Attachement", b =>
                {
                    b.HasOne("Domain.Models.AttachementType", "AttachementType")
                        .WithMany("Attachements")
                        .HasForeignKey("AttachementTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachements_AttachementTypes");

                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("Attachements")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Attachements_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("AttachementCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("AttachementUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AttachementType");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.AttachementType", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("AttachementTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("AttachementTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Correspondence", b =>
                {
                    b.HasOne("Domain.Models.CorrespondenceSubType", "CorrespondenceSubType")
                        .WithMany("Correspondences")
                        .HasForeignKey("CorrespondenceSubTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.ExternalUnit", "ExternalUnit")
                        .WithMany("Correspondences")
                        .HasForeignKey("ExternalUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Correspondence", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Correspondences_Correspondences");

                    b.HasOne("Domain.Models.Template", "Template")
                        .WithMany("Correspondences")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Workflow", "Workflow")
                        .WithMany("Correspondences")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondenceSubType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExternalUnit");

                    b.Navigation("Parent");

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceAction", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceActionsCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceActionsUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceInbox", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("CorrespondenceInboxes")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondenceInbox_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceInboxCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "FromUserOrgUnit")
                        .WithMany("CorrespondenceInboxFromUserOrgUnits")
                        .HasForeignKey("FromUserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondenceInbox_UserOrgUnit1");

                    b.HasOne("Domain.Models.Procedure", "Procedure")
                        .WithMany("CorrespondenceInboxes")
                        .HasForeignKey("ProcedureId")
                        .HasConstraintName("FK_CorrespondenceInbox_Procedures");

                    b.HasOne("Domain.Models.Status", "Status")
                        .WithMany("CorrespondenceInboxes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_CorrespondenceInbox_Actions");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceInboxUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("CorrespondenceInboxUserOrgUnits")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondenceInbox_UserOrgUnit");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FromUserOrgUnit");

                    b.Navigation("Procedure");

                    b.Navigation("Status");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceSubType", b =>
                {
                    b.HasOne("Domain.Models.CorrespondenceType", "CorrespondenceType")
                        .WithMany("CorrespondenceSubTypes")
                        .HasForeignKey("CorrespondenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceSubTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceSubTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondenceType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceTag", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("CorrespondenceTags")
                        .HasForeignKey("CorrespondenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceTagCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tag", "Tag")
                        .WithMany("CorrespondenceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceTagUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Tag");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceType", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceWorkflowStep", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("CorrespondenceWorkflowSteps")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondenceWorkflowSteps_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondenceWorkflowStepCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondenceWorkflowStepUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.WorkflowStep", "WorkfloStep")
                        .WithMany("CorrespondenceWorkflowSteps")
                        .HasForeignKey("WorkfloStepId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondenceWorkflowSteps_WorkflowSteps");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("WorkfloStep");
                });

            modelBuilder.Entity("Domain.Models.CorrespondencesOutbox", b =>
                {
                    b.HasOne("Domain.Models.Status", "Action")
                        .WithMany("CorrespondencesOutboxes")
                        .HasForeignKey("ActionId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondencesOutbox_Actions");

                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("CorrespondencesOutboxes")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondencesOutbox_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("CorrespondencesOutboxCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Procedure", "Procedure")
                        .WithMany("CorrespondencesOutboxes")
                        .HasForeignKey("ProcedureId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondencesOutbox_Procedures");

                    b.HasOne("Domain.Models.UserOrgUnit", "ToUserOrgUnit")
                        .WithMany("CorrespondencesOutboxToUserOrgUnits")
                        .HasForeignKey("ToUserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondencesOutbox_UserOrgUnit1");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("CorrespondencesOutboxUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("CorrespondencesOutboxUserOrgUnits")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_CorrespondencesOutbox_UserOrgUnit");

                    b.Navigation("Action");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Procedure");

                    b.Navigation("ToUserOrgUnit");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.Delegate", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("DelegateCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "DelegateFromNavigation")
                        .WithMany("Delegates")
                        .HasForeignKey("DelegateFrom")
                        .IsRequired()
                        .HasConstraintName("FK_Delegates_UserOrgUnit");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("DelegateUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DelegateFromNavigation");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Draft", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("Drafts")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Draft_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("DraftCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("DraftUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("Drafts")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Draft_UserOrgUnit");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.ExternalUnit", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ExternalUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.ExternalUnitType", "ExternalUnitType")
                        .WithMany("ExternalUnits")
                        .HasForeignKey("ExternalUnitTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_ExternalUnits_ExternalUnitTypes");

                    b.HasOne("Domain.Models.SubexternalUnit", "SubexternalUnit")
                        .WithMany("ExternalUnits")
                        .HasForeignKey("SubexternalUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ExternalUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExternalUnitType");

                    b.Navigation("SubexternalUnit");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.ExternalUnitType", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ExternalUnitTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ExternalUnitTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("GroupCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("GroupUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("Groups")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Groups_UserOrgUnit");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.GroupDetail", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("GroupDetailCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Group", "Group")
                        .WithMany("GroupDetails")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupDetails_Groups");

                    b.HasOne("Domain.Models.OrgUnit", "OrgUnit")
                        .WithMany("GroupDetails")
                        .HasForeignKey("OrgUnitId")
                        .HasConstraintName("FK_GroupDetails_OrgUnits");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("GroupDetailUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("GroupDetails")
                        .HasForeignKey("UserOrgUnitId")
                        .HasConstraintName("FK_GroupDetails_UserOrgUnit");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");

                    b.Navigation("OrgUnit");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.OrgUnit", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("OrgUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.OrgUnitType", "OrgUnitType")
                        .WithMany("OrgUnits")
                        .HasForeignKey("OrgUnitTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_OrgUnits_OrgUnitType");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("OrgUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("OrgUnitType");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.OrgUnitType", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("OrgUnitTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("OrgUnitTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Privilege", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("PrivilegeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("PrivilegeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.PrivilegeCategory", "UserPrivilegeCategory")
                        .WithMany("UserPrivileges")
                        .HasForeignKey("UserPrivilegeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserPrivilegeCategory");
                });

            modelBuilder.Entity("Domain.Models.PrivilegeCategory", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("PrivilegeCategoryCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.SystemModule", "SystemModule")
                        .WithMany("PrivilegeCategories")
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("PrivilegeCategoryUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("SystemModule");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.PrivilegeSecurityGroup", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("PrivilegeSecurityGroupCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Privilege", "Privilege")
                        .WithMany()
                        .HasForeignKey("PrivilegeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.SecurityGroup", "SecurityGroup")
                        .WithMany("RoleSecurityGroups")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("PrivilegeSecurityGroupUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Privilege");

                    b.Navigation("SecurityGroup");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Procedure", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ProcedureCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ProcedureUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.PublicRecord", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("PublicRecords")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_PublicRecord_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("PublicRecordCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.PublicRecordStatus", "PublicRecordStatus")
                        .WithMany("PublicRecords")
                        .HasForeignKey("PublicRecordStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("PublicRecordUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("PublicRecordStatus");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.PublicRecordStatus", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("PublicRecordStatusCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("PublicRecordStatusUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SecurityGroup", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SecurityGroupCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SecurityGroupUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SentToExternalUnit", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspodence")
                        .WithMany("SentToExternalUnits")
                        .HasForeignKey("CorrespodenceId")
                        .IsRequired()
                        .HasConstraintName("FK_SentToExternalUnits_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SentToExternalUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.ExternalUnit", "ExternalUnit")
                        .WithMany("SentToExternalUnits")
                        .HasForeignKey("ExternalUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_SentToExternalUnits_ExternalUnits");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SentToExternalUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Correspodence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExternalUnit");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SentToOrgUnit", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("SentToOrgUnits")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_SentToOrgUnit_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SentToOrgUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.OrgUnit", "OrgUnit")
                        .WithMany("SentToOrgUnits")
                        .HasForeignKey("OrgUnitid")
                        .IsRequired()
                        .HasConstraintName("FK_SentToOrgUnit_OrgUnits");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SentToOrgUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("OrgUnit");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SentToUserOrgUnit", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("SentToUserOrgUnits")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_SentToUserOrgUnits_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SentToUserOrgUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SentToUserOrgUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("SentToUserOrgUnits")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_SentToUserOrgUnits_UserOrgUnit");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.Status", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("StatusCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("StatusUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SubexternalUnit", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SubexternalUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SubexternalUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.SystemModule", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("SystemModuleCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("SystemModuleUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TagCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TagUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Template", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TemplateCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TemplateUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.TemplateCorresponednceSubType", b =>
                {
                    b.HasOne("Domain.Models.CorrespondenceSubType", "CorrespondenceSubType")
                        .WithMany("TemplateCorresponednceSubTypes")
                        .HasForeignKey("CorrespondenceSubTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_TemplateCorresponednceSubTypes_CorrespondenceTypes");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TemplateCorresponednceTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Template", "Template")
                        .WithMany("TemplateCorresponednceSubTypes")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_TemplateCorresponednceSubTypes_Templates");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TemplateCorresponednceTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CorrespondenceSubType");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.TemplateOrgUnit", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TemplateOrgUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "OrgUnit")
                        .WithMany("TemplateOrgUnits")
                        .HasForeignKey("OrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_TemplateOrgUnits_UserOrgUnit");

                    b.HasOne("Domain.Models.Template", "Template")
                        .WithMany("TemplateOrgUnits")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_TemplateOrgUnits_Templates");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TemplateOrgUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("OrgUnit");

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.Tracker", b =>
                {
                    b.HasOne("Domain.Models.Status", "Action")
                        .WithMany("Trackers")
                        .HasForeignKey("ActionId")
                        .HasConstraintName("FK_Trackers_Actions");

                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("Trackers")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Trackers_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TrackerCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "FromUserOrgUnit")
                        .WithMany("TrackerFromUserOrgUnits")
                        .HasForeignKey("FromUserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Trackers_UserOrgUnit");

                    b.HasOne("Domain.Models.UserOrgUnit", "ToUserOrgUnit")
                        .WithMany("TrackerToUserOrgUnits")
                        .HasForeignKey("ToUserOrgUnitId")
                        .HasConstraintName("FK_Trackers_UserOrgUnit1");

                    b.HasOne("Domain.Models.TrackerStatus", "TrackerStatus")
                        .WithMany("Trackers")
                        .HasForeignKey("TrackerStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Trackers_TrackerStatus");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TrackerUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Action");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("FromUserOrgUnit");

                    b.Navigation("ToUserOrgUnit");

                    b.Navigation("TrackerStatus");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.TrackerStatus", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("TrackerStatusCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("TrackerStatusUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("UserCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.SecurityGroup", "SecurityGroup")
                        .WithMany("Users")
                        .HasForeignKey("SecurityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("UserUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", null)
                        .WithMany("Employees")
                        .HasForeignKey("UserOrgUnitId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("SecurityGroup");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.UserOrgUnit", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("UserOrgUnitCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Delegate", "Delegate")
                        .WithOne("UserOrgUnit")
                        .HasForeignKey("Domain.Models.UserOrgUnit", "DelegateId")
                        .HasConstraintName("FK_UserOrgUnit_Delegate");

                    b.HasOne("Domain.Models.OrgUnit", "OrgUnit")
                        .WithMany("UserOrgUnits")
                        .HasForeignKey("OrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_UserOrgUnit_OrgUnits");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("UserOrgUnitUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany("UserOrgUnits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserOrgUnit_Users");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Delegate");

                    b.Navigation("OrgUnit");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.View", b =>
                {
                    b.HasOne("Domain.Models.Correspondence", "Correspondence")
                        .WithMany("Views")
                        .HasForeignKey("CorrespondenceId")
                        .IsRequired()
                        .HasConstraintName("FK_Views_Correspondences");

                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("ViewCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("ViewUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UserOrgUnit")
                        .WithMany("Views")
                        .HasForeignKey("UserOrgUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_Views_UserOrgUnit");

                    b.Navigation("Correspondence");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("UserOrgUnit");
                });

            modelBuilder.Entity("Domain.Models.Workflow", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("WorkflowCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Template", "Template")
                        .WithMany("Workflows")
                        .HasForeignKey("TemplateId")
                        .HasConstraintName("FK_Workflows_Templates");

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("WorkflowUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.WorkflowType", "WorkflowType")
                        .WithMany("Workflows")
                        .HasForeignKey("WorkflowTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Template");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("WorkflowType");
                });

            modelBuilder.Entity("Domain.Models.WorkflowRole", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("WorkflowRoleCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("WorkflowRoleUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.WorkflowStep", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("WorkflowStepCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("WorkflowStepUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Workflow", "Workflow")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowSteps_Workflows");

                    b.HasOne("Domain.Models.WorkflowRole", "WorkflowRole")
                        .WithMany("WorkflowSteps")
                        .HasForeignKey("WorkflowRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_WorkflowSteps_WorkflowRoles");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("Workflow");

                    b.Navigation("WorkflowRole");
                });

            modelBuilder.Entity("Domain.Models.WorkflowType", b =>
                {
                    b.HasOne("Domain.Models.UserOrgUnit", "CreatedByUser")
                        .WithMany("WorkflowTypeCreate")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.UserOrgUnit", "UpdatedByUser")
                        .WithMany("WorkflowTypeUpdate")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Domain.Models.AttachementType", b =>
                {
                    b.Navigation("Attachements");
                });

            modelBuilder.Entity("Domain.Models.Correspondence", b =>
                {
                    b.Navigation("Archives");

                    b.Navigation("Attachements");

                    b.Navigation("CorrespondenceInboxes");

                    b.Navigation("CorrespondenceTags");

                    b.Navigation("CorrespondenceWorkflowSteps");

                    b.Navigation("CorrespondencesOutboxes");

                    b.Navigation("Drafts");

                    b.Navigation("InverseParent");

                    b.Navigation("PublicRecords");

                    b.Navigation("SentToExternalUnits");

                    b.Navigation("SentToOrgUnits");

                    b.Navigation("SentToUserOrgUnits");

                    b.Navigation("Trackers");

                    b.Navigation("Views");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceSubType", b =>
                {
                    b.Navigation("Correspondences");

                    b.Navigation("TemplateCorresponednceSubTypes");
                });

            modelBuilder.Entity("Domain.Models.CorrespondenceType", b =>
                {
                    b.Navigation("CorrespondenceSubTypes");
                });

            modelBuilder.Entity("Domain.Models.Delegate", b =>
                {
                    b.Navigation("UserOrgUnit")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.ExternalUnit", b =>
                {
                    b.Navigation("Correspondences");

                    b.Navigation("SentToExternalUnits");
                });

            modelBuilder.Entity("Domain.Models.ExternalUnitType", b =>
                {
                    b.Navigation("ExternalUnits");
                });

            modelBuilder.Entity("Domain.Models.Group", b =>
                {
                    b.Navigation("GroupDetails");
                });

            modelBuilder.Entity("Domain.Models.OrgUnit", b =>
                {
                    b.Navigation("ApprovalAuthorityExceptions");

                    b.Navigation("GroupDetails");

                    b.Navigation("SentToOrgUnits");

                    b.Navigation("UserOrgUnits");
                });

            modelBuilder.Entity("Domain.Models.OrgUnitType", b =>
                {
                    b.Navigation("OrgUnits");
                });

            modelBuilder.Entity("Domain.Models.PrivilegeCategory", b =>
                {
                    b.Navigation("UserPrivileges");
                });

            modelBuilder.Entity("Domain.Models.Procedure", b =>
                {
                    b.Navigation("CorrespondenceInboxes");

                    b.Navigation("CorrespondencesOutboxes");
                });

            modelBuilder.Entity("Domain.Models.PublicRecordStatus", b =>
                {
                    b.Navigation("PublicRecords");
                });

            modelBuilder.Entity("Domain.Models.SecurityGroup", b =>
                {
                    b.Navigation("RoleSecurityGroups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Models.Status", b =>
                {
                    b.Navigation("CorrespondenceInboxes");

                    b.Navigation("CorrespondencesOutboxes");

                    b.Navigation("Trackers");
                });

            modelBuilder.Entity("Domain.Models.SubexternalUnit", b =>
                {
                    b.Navigation("ExternalUnits");
                });

            modelBuilder.Entity("Domain.Models.SystemModule", b =>
                {
                    b.Navigation("PrivilegeCategories");
                });

            modelBuilder.Entity("Domain.Models.Tag", b =>
                {
                    b.Navigation("CorrespondenceTags");
                });

            modelBuilder.Entity("Domain.Models.Template", b =>
                {
                    b.Navigation("Correspondences");

                    b.Navigation("TemplateCorresponednceSubTypes");

                    b.Navigation("TemplateOrgUnits");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("Domain.Models.TrackerStatus", b =>
                {
                    b.Navigation("Trackers");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Navigation("UserOrgUnits");
                });

            modelBuilder.Entity("Domain.Models.UserOrgUnit", b =>
                {
                    b.Navigation("ApprovalAuthorityExceptionCreate");

                    b.Navigation("ApprovalAuthorityExceptionUpdate");

                    b.Navigation("ApprovalAuthorityExceptions");

                    b.Navigation("ArchiveCreate");

                    b.Navigation("ArchiveUpdate");

                    b.Navigation("Archives");

                    b.Navigation("AttachementCreate");

                    b.Navigation("AttachementTypeCreate");

                    b.Navigation("AttachementTypeUpdate");

                    b.Navigation("AttachementUpdate");

                    b.Navigation("CorrespondenceActionsCreate");

                    b.Navigation("CorrespondenceActionsUpdate");

                    b.Navigation("CorrespondenceCreate");

                    b.Navigation("CorrespondenceInboxCreate");

                    b.Navigation("CorrespondenceInboxFromUserOrgUnits");

                    b.Navigation("CorrespondenceInboxUpdate");

                    b.Navigation("CorrespondenceInboxUserOrgUnits");

                    b.Navigation("CorrespondenceSubTypeCreate");

                    b.Navigation("CorrespondenceSubTypeUpdate");

                    b.Navigation("CorrespondenceTagCreate");

                    b.Navigation("CorrespondenceTagUpdate");

                    b.Navigation("CorrespondenceTypeCreate");

                    b.Navigation("CorrespondenceTypeUpdate");

                    b.Navigation("CorrespondenceUpdate");

                    b.Navigation("CorrespondenceWorkflowStepCreate");

                    b.Navigation("CorrespondenceWorkflowStepUpdate");

                    b.Navigation("CorrespondencesOutboxCreate");

                    b.Navigation("CorrespondencesOutboxToUserOrgUnits");

                    b.Navigation("CorrespondencesOutboxUpdate");

                    b.Navigation("CorrespondencesOutboxUserOrgUnits");

                    b.Navigation("DelegateCreate");

                    b.Navigation("DelegateUpdate");

                    b.Navigation("Delegates");

                    b.Navigation("DraftCreate");

                    b.Navigation("DraftUpdate");

                    b.Navigation("Drafts");

                    b.Navigation("Employees");

                    b.Navigation("ExternalUnitCreate");

                    b.Navigation("ExternalUnitTypeCreate");

                    b.Navigation("ExternalUnitTypeUpdate");

                    b.Navigation("ExternalUnitUpdate");

                    b.Navigation("GroupCreate");

                    b.Navigation("GroupDetailCreate");

                    b.Navigation("GroupDetailUpdate");

                    b.Navigation("GroupDetails");

                    b.Navigation("GroupUpdate");

                    b.Navigation("Groups");

                    b.Navigation("OrgUnitCreate");

                    b.Navigation("OrgUnitTypeCreate");

                    b.Navigation("OrgUnitTypeUpdate");

                    b.Navigation("OrgUnitUpdate");

                    b.Navigation("PrivilegeCategoryCreate");

                    b.Navigation("PrivilegeCategoryUpdate");

                    b.Navigation("PrivilegeCreate");

                    b.Navigation("PrivilegeSecurityGroupCreate");

                    b.Navigation("PrivilegeSecurityGroupUpdate");

                    b.Navigation("PrivilegeUpdate");

                    b.Navigation("ProcedureCreate");

                    b.Navigation("ProcedureUpdate");

                    b.Navigation("PublicRecordCreate");

                    b.Navigation("PublicRecordStatusCreate");

                    b.Navigation("PublicRecordStatusUpdate");

                    b.Navigation("PublicRecordUpdate");

                    b.Navigation("SecurityGroupCreate");

                    b.Navigation("SecurityGroupUpdate");

                    b.Navigation("SentToExternalUnitCreate");

                    b.Navigation("SentToExternalUnitUpdate");

                    b.Navigation("SentToOrgUnitCreate");

                    b.Navigation("SentToOrgUnitUpdate");

                    b.Navigation("SentToUserOrgUnitCreate");

                    b.Navigation("SentToUserOrgUnitUpdate");

                    b.Navigation("SentToUserOrgUnits");

                    b.Navigation("StatusCreate");

                    b.Navigation("StatusUpdate");

                    b.Navigation("SubexternalUnitCreate");

                    b.Navigation("SubexternalUnitUpdate");

                    b.Navigation("SystemModuleCreate");

                    b.Navigation("SystemModuleUpdate");

                    b.Navigation("TagCreate");

                    b.Navigation("TagUpdate");

                    b.Navigation("TemplateCorresponednceTypeCreate");

                    b.Navigation("TemplateCorresponednceTypeUpdate");

                    b.Navigation("TemplateCreate");

                    b.Navigation("TemplateOrgUnitCreate");

                    b.Navigation("TemplateOrgUnitUpdate");

                    b.Navigation("TemplateOrgUnits");

                    b.Navigation("TemplateUpdate");

                    b.Navigation("TrackerCreate");

                    b.Navigation("TrackerFromUserOrgUnits");

                    b.Navigation("TrackerStatusCreate");

                    b.Navigation("TrackerStatusUpdate");

                    b.Navigation("TrackerToUserOrgUnits");

                    b.Navigation("TrackerUpdate");

                    b.Navigation("UserCreate");

                    b.Navigation("UserOrgUnitCreate");

                    b.Navigation("UserOrgUnitUpdate");

                    b.Navigation("UserUpdate");

                    b.Navigation("ViewCreate");

                    b.Navigation("ViewUpdate");

                    b.Navigation("Views");

                    b.Navigation("WorkflowCreate");

                    b.Navigation("WorkflowRoleCreate");

                    b.Navigation("WorkflowRoleUpdate");

                    b.Navigation("WorkflowStepCreate");

                    b.Navigation("WorkflowStepUpdate");

                    b.Navigation("WorkflowTypeCreate");

                    b.Navigation("WorkflowTypeUpdate");

                    b.Navigation("WorkflowUpdate");
                });

            modelBuilder.Entity("Domain.Models.Workflow", b =>
                {
                    b.Navigation("Correspondences");

                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("Domain.Models.WorkflowRole", b =>
                {
                    b.Navigation("WorkflowSteps");
                });

            modelBuilder.Entity("Domain.Models.WorkflowStep", b =>
                {
                    b.Navigation("CorrespondenceWorkflowSteps");
                });

            modelBuilder.Entity("Domain.Models.WorkflowType", b =>
                {
                    b.Navigation("Workflows");
                });
#pragma warning restore 612, 618
        }
    }
}
